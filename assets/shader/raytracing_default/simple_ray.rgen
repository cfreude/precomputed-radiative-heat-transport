#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_debug_printf : enable
#extension GL_ARB_gpu_shader_int64 : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

#define printf(px,py,s,v) if(gl_LaunchIDEXT.x == px &&  gl_LaunchIDEXT.y == py) debugPrintfEXT(s, v);
#define debugPrintf if(gl_LaunchIDEXT.x == ubo.debugPixelPosition.x &&  gl_LaunchIDEXT.y == ubo.debugPixelPosition.y) debugPrintfEXT

#include "defines.h"
#include "../utils/glsl/ray_tracing_utils.glsl"
#include "../utils/glsl/rendering_utils.glsl"

#define DEBUG_PRINT_BXDF_CHECK_NAN 1
#include "../utils/glsl/bxdfs/fresnel.glsl"
#include "../utils/glsl/bxdfs/metallic_roughness.glsl"
#include "../utils/glsl/bxdfs/dielectric.glsl"

#include "../utils/glsl/pixel_filter.glsl"
#include "../utils/glsl/tone_mapping.glsl"

// set 0
#define CONV_TEXTURE_BINDING BINDLESS_IMAGE_DESC_BINDING
#define CONV_TEXTURE_SET BINDLESS_IMAGE_DESC_SET
#include "../convenience/glsl/texture_data.glsl"

// set 1
layout(binding = GLOBAL_DESC_UBO_BINDING, set = GLOBAL_DESC_SET) uniform global_ubo { GlobalUbo_s ubo; };

#define CONV_INDEX_BUFFER_BINDING GLOBAL_DESC_INDEX_BUFFER_BINDING
#define CONV_INDEX_BUFFER_SET GLOBAL_DESC_SET
#define CONV_VERTEX_BUFFER_BINDING GLOBAL_DESC_VERTEX_BUFFER_BINDING
#define CONV_VERTEX_BUFFER_SET GLOBAL_DESC_SET
#include "../convenience/glsl/vertex_data.glsl"

#define CONV_TLAS_BINDING GLOBAL_DESC_AS_BINDING
#define CONV_TLAS_SET GLOBAL_DESC_SET
#define CONV_GEOMETRY_BUFFER_BINDING GLOBAL_DESC_GEOMETRY_DATA_BINDING
#define CONV_GEOMETRY_BUFFER_SET GLOBAL_DESC_SET
#include "../convenience/glsl/as_data.glsl"

#define CONV_MATERIAL_BUFFER_BINDING GLOBAL_DESC_MATERIAL_BUFFER_BINDING
#define CONV_MATERIAL_BUFFER_SET GLOBAL_DESC_SET
#include "../convenience/glsl/material_data.glsl"

#define CONV_LIGHT_BUFFER_BINDING GLSL_GLOBAL_LIGHT_DATA_BINDING
#define CONV_LIGHT_BUFFER_SET GLOBAL_DESC_SET
#include "../convenience/glsl/light_data.glsl"

layout(binding = GLSL_GLOBAL_RT_OUT_IMAGE_BINDING, set = GLOBAL_DESC_SET, rgba8) uniform image2D output_image;
layout(binding = GLSL_GLOBAL_RT_ACC_IMAGE_BINDING, set = GLOBAL_DESC_SET, rgba32f) uniform image2D acc_image;
layout(binding = GLSL_GLOBAL_RT_ACC_C_IMAGE_BINDING, set = GLOBAL_DESC_SET, r32f) uniform image2D acc_c_image;
layout(binding = GLSL_GLOBAL_DEBUG_IMAGE_BINDING, set = GLOBAL_DESC_SET, rgba8) uniform image2D debug_image;

#include "payload.glsl"
layout(location = 0) rayPayloadEXT RayPayload rp;
layout(location = 1) rayPayloadEXT ShadowRayPayload srp;

struct Ray {
	vec3 	origin, direction;
	float 	t_min, t_max;
};

// data of the intersected geometry
struct HitData {
	vec4 	albedo;
	vec3	emission;
	float 	occlusion;				// baked occlusion			
	vec3 	hit_pos_ws;				// hit position worldspace
	uint 	id;						// id of the object hit
	vec3 	o_geo_n_ws_norm;		// original geometry normal normalized
	vec3 	geo_n_ws_norm;			// geometry normal normalized
	vec3 	n_ws_norm;				// normal normalized (can be same as geo normal or smoother)
	float 	metallic;				
	vec3 	nmap_n_ws_norm;			// normal map normal normalized
	float 	roughness;
	vec3	view_pos_ws;			// position from which this hit was produced in worldspace
	float 	view_dist;				// distance between hit pos and the position this hit was produced
	vec3	wi_ws_norm;				// hit pos to pos from which this hit was produced in worldspace
	vec3 	t_ws_norm;				// geometry tangent normalized
	float	eta_int;				// interior
	vec3 	b_ws_norm;				// geometry bitangent normalized
	float	eta_ext;				// exterior
	vec2	tex_coords_0;	
	float 	transmission;
	bool	is_emissive;
	bool	is_double_sided;
	float 	area;				
};
struct BounceData {
	vec3 throughput;
	int depth;
	vec3 wo_ws_norm;
	float pdf;
	vec3 weight;
};

uint seed; // set at the beginning of main function

// screen coordinates in clip space
vec2 getScreenCoordinates(const vec2 sample_radius, out float sample_weight){
	// offset by [0,1] * diameter - radius -> [-radius,+radius]
	vec2 pSampleOffset = (vec2(randomFloat(seed), randomFloat(seed)) * 2.0f * sample_radius) - sample_radius;
	vec2 pSamplePos = vec2(gl_LaunchIDEXT.xy) + vec2(0.5); 	// center of pixel
	pSamplePos += pSampleOffset;							// offest by radius around pixel center
	const vec2 inUV = pSamplePos/vec2(gl_LaunchSizeEXT.xy);
	const vec2 screenCoordClipSpace  = inUV * 2.0 - 1.0;

	// https://www.pbr-book.org/3ed-2018/Sampling_and_Reconstruction/Image_Reconstruction#
	sample_weight = ApplyPixelFilter(ubo.pixel_filter_type, pSampleOffset, sample_radius, ubo.pixel_filter_extra);
	return screenCoordClipSpace;
}

Ray getRay(const vec2 sccs)
{
	const vec4 origin = ubo.inverseViewMat * vec4(0,0,0,1);
	const vec4 target = ubo.inverseProjMat * vec4(sccs.x, sccs.y, 1, 1) ;
	const vec4 direction = ubo.inverseViewMat * vec4(normalize(target.xyz), 0) ;

	Ray ray;
	ray.origin = origin.xyz;
	ray.direction = normalize(direction.xyz);
	ray.t_min = ubo.fr_tmin;
	ray.t_max = ubo.fr_tmax;
	return ray;
}

/*
** BSDFs
*/
#define LAMBERT_BRDF 0
float brdf_pdf(in vec3 wi, in vec3 wo, in HitData hd){
#if LAMBERT_BRDF
	return lambert_brdf_pdf(wo, hd.nmap_n_ws_norm);
#else
	return metalroughness_pdf(wi, wo, hd.nmap_n_ws_norm, hd.metallic, hd.roughness, hd.transmission, hd.eta_int, hd.eta_ext, hd.is_double_sided);
#endif
	//return plastic_pdf(wi, wo, hd.nmap_n_ws_norm, hd.roughness, hd.transmission, hd.eta_i, hd.eta_o);
	// if(hd.transmission == 1) {
	// return conductor_pdf(wi, wo, hd.nmap_n_ws_norm, hd.roughness);
	// //return dielectric_pdf(wi, wo, hd.nmap_n_ws_norm, hd.roughness, hd.eta_i, hd.eta_o);
	// } else return lambert_brdf_pdf(wo, hd.nmap_n_ws_norm);
}
bool brdf_sample(inout BounceData bd, in HitData hd){
#if LAMBERT_BRDF
	return lambert_brdf_sample(hd.nmap_n_ws_norm, hd.albedo.xyz,  randomFloat2(seed), bd.wo_ws_norm, bd.pdf, bd.weight);
#else
	return metalroughness_sample(hd.wi_ws_norm, hd.nmap_n_ws_norm, hd.albedo.xyz, hd.metallic, hd.roughness, hd.transmission, hd.eta_int, hd.eta_ext, hd.is_double_sided, randomFloat4(seed), randomFloat3(seed), bd.wo_ws_norm, bd.pdf, bd.weight);
#endif
	//return plastic_sample(hd.wi_ws_norm, hd.nmap_n_ws_norm, hd.albedo.xyz, hd.roughness, hd.transmission, hd.eta_i, hd.eta_o, randomFloat3(seed), randomFloat3(seed), bd.wo_ws_norm, bd.pdf, bd.weight);
	//  if(hd.transmission == 1) {
	// //return conductor_sample(hd.wi_ws_norm, hd.nmap_n_ws_norm, hd.roughness, hd.albedo.xyz, randomFloat2(seed), bd.wo_ws_norm, bd.pdf, bd.weight);
	// //return dielectric_sample(hd.wi_ws_norm, hd.nmap_n_ws_norm, hd.roughness, hd.eta_i, hd.eta_o, randomFloat3(seed), bd.wo_ws_norm, bd.pdf, bd.weight);
	// } else {
	// 	return lambert_brdf_sample(hd.nmap_n_ws_norm, hd.albedo.xyz,  randomFloat2(seed), bd.wo_ws_norm, bd.pdf, bd.weight);
	// }
}
vec3 brdf_eval(in vec3 wi, in vec3 wo, in HitData hd){
#if LAMBERT_BRDF
	return lambert_brdf_eval(wo, hd.nmap_n_ws_norm, hd.albedo.xyz);
#else
	return metalroughness_eval(wi, wo, hd.nmap_n_ws_norm, hd.albedo.xyz, hd.metallic, hd.roughness, hd.transmission, hd.eta_int, hd.eta_ext, hd.is_double_sided);
#endif
	//return plastic_eval(wi, wo, hd.nmap_n_ws_norm, hd.albedo.xyz, hd.roughness, hd.transmission, hd.eta_i, hd.eta_o);
	// if(hd.transmission == 1) {
	// return conductor_eval(wi, wo, hd.nmap_n_ws_norm, hd.roughness, hd.albedo.xyz);
	// //return dielectric_eval(wi,wo,hd.nmap_n_ws_norm, hd.albedo.xyz, hd.roughness, hd.eta_i, hd.eta_o);
	// } else return lambert_brdf_eval(wo, hd.nmap_n_ws_norm, hd.albedo.xyz);
}

uint prevLightIndex;
uint prevLightTriangleIndex;
vec3 evalLight(uint index, in HitData hd, inout BounceData bd){
	Light_s light = light_buffer[index];

	float lpdf = 0;
	float weight = 0;
	float area = 0;
	// light type
	const uint type = light.type;
	const vec3 f_v_dir_norm = normalize(hd.view_pos_ws - hd.hit_pos_ws);	// frag to view dir

	vec3 f_l_dir;		// frag to light dir
	vec3 f_l_dir_norm;
	float f_l_dist;
	if(isPunctualLight(index)) {
		if(isDirectionalLight(index)) f_l_dir = -1 * light.n_ws_norm.xyz;
		else f_l_dir = light.pos_ws.xyz - hd.hit_pos_ws;
		lpdf = 1;
		// soft shadows
		if(light.light_offset > 0.0f) {
			if(isDirectionalLight(index)) {
				const float angle = radians(light.light_offset);
				const vec2 offset = sampleUnitDiskConcentric(vec2(randomFloat(seed), randomFloat(seed))) / 2.0f;
				const vec3 l_t_ws_norm = getPerpendicularVector(light.n_ws_norm.xyz );
				const vec3 l_b_ws_norm = cross(light.n_ws_norm.xyz , l_t_ws_norm);
				const vec4 dir = vec4(light.n_ws_norm.xyz, 1) * rotationMatrix(l_t_ws_norm, angle * offset.x);
				f_l_dir = -(dir * rotationMatrix(l_b_ws_norm, angle * offset.y)).xyz;
			}
			// spot and point
			else {
				const float radius = light.light_offset;
				const vec2 offset = sampleUnitDiskConcentric(vec2(randomFloat(seed), randomFloat(seed)));
				const vec3 l_n_ws_norm = -normalize(f_l_dir);
				const vec3 pos = light.pos_ws.xyz + tangentSpaceToWorldSpace(vec3(offset.x, offset.y, 0), l_n_ws_norm) * radius;
				f_l_dir = pos - hd.hit_pos_ws;

				{	// debug
					vec2 screen = worldSpaceToScreenSpace(vec4(pos, 1), ubo.projMat * ubo.viewMat, ubo.size);
					imageStore(debug_image, ivec2(screen), vec4(1,0,0, 1));
				}
			}
		}
		f_l_dir_norm = normalize(f_l_dir);
		f_l_dist = length(f_l_dir);

		float attenuation = 1.0f;
		float angularAttenuation = 1.0f;
		if(!isDirectionalLight(index)) {
			attenuation = ATTENUATION_RANGE(f_l_dist, light.range);
		}
		// spot light angular attenuation
		if(isSpotLight(index)){
			float cd = dot(light.n_ws_norm.xyz, -1 * f_l_dir_norm);
			angularAttenuation = clamp(cd * light.light_angle_scale + light.light_angle_offset,0.0,1.0);
			angularAttenuation *= angularAttenuation;
		}
		weight = WATT_TO_RADIANT_INTENSITY(light.intensity) * attenuation * angularAttenuation;
	} else if(isIesLight(index)) {
		f_l_dir = light.pos_ws.xyz - hd.hit_pos_ws;
		f_l_dir_norm = normalize(f_l_dir);
		f_l_dist = length(f_l_dir);
		float attenuation = ATTENUATION_RANGE(f_l_dist, light.range);
		lpdf = 1;
		weight = WATT_TO_RADIANT_INTENSITY(light.intensity * evalIesLightBilinear(index, -f_l_dir_norm)) * attenuation;
	} else if(isSurfaceLight(index)){
		const vec3 l_t_ws_norm = light.t_ws_norm.xyz;
		const vec3 l_b_ws_norm = cross(l_t_ws_norm, light.n_ws_norm.xyz);
		if(isHyperrectangularLight(index)){
			vec2 offset = (vec2(randomFloat(seed), randomFloat(seed)) - 0.5f) * light.dimensions.xy;
			light.pos_ws.xyz += tangentSpaceToWorldSpace(vec3(offset, 0), l_t_ws_norm, l_b_ws_norm, light.n_ws_norm.xyz);
			area = light.dimensions.x * light.dimensions.y; /*rectangle area*/
		}else {
			vec2 radius = light.dimensions.xy * 0.5f;
			vec2 offset = sampleUnitDiskConcentric(vec2(randomFloat(seed), randomFloat(seed))) * radius;
			light.pos_ws.xyz += tangentSpaceToWorldSpace(vec3(offset, 0), l_t_ws_norm, l_b_ws_norm, light.n_ws_norm.xyz);
			area = M_PI * radius.x * radius.y; /*disk area*/
		}
		f_l_dir = light.pos_ws.xyz - hd.hit_pos_ws;
		f_l_dist = length(f_l_dir);
		f_l_dir_norm = f_l_dir / f_l_dist;
		
		// ignore back lighting
		if(dot(light.n_ws_norm.xyz,-f_l_dir_norm) < 0) return vec3(0);
		weight = WATT_TO_RADIANT_INTENSITY(light.intensity);
		lpdf = areaToSolidAngle(1.0f/area, f_l_dist, dot(light.n_ws_norm.xyz,-f_l_dir_norm));
	}
	else if(isTriangleMeshLight(index)) {
		// we do not want to illuminate the light itself
		if(hd.id == light.id) return vec3(0);

		const int tri_idx = sampleRangeUniform(0, int(light.triangle_count - 1), randomFloat(seed));
		prevLightTriangleIndex = tri_idx;
		const vec3 bary = sampleUnitTriangleUniform(randomFloat2(seed));
		// indices
		uint idx_0 = 0;
		uint idx_1 = 0;
		uint idx_2 = 0;
		if(light.index_buffer_offset != uint(-1)){
			idx_0 = index_buffer[light.index_buffer_offset + (tri_idx * 3) + 0];
			idx_1 = index_buffer[light.index_buffer_offset + (tri_idx * 3) + 1];
			idx_2 = index_buffer[light.index_buffer_offset + (tri_idx * 3) + 2];
		} else {
			idx_0 = (tri_idx * 3) + 0;
			idx_1 = (tri_idx * 3) + 1;
			idx_2 = (tri_idx * 3) + 2;
		}
		mat4x4 mat = mat4(light.pos_ws, light.n_ws_norm, light.t_ws_norm, vec4(0,0,0,1));
		mat = transpose(mat);
		// vertex
		vec3 pos_ws;
		{
			vec3 v_0 = (mat * vertex_buffer[light.vertex_buffer_offset + idx_0].position).xyz;
			vec3 v_1 = (mat * vertex_buffer[light.vertex_buffer_offset + idx_1].position).xyz;
			vec3 v_2 = (mat * vertex_buffer[light.vertex_buffer_offset + idx_2].position).xyz;
			pos_ws = (vec4(bary.x * v_0 + bary.y * v_1 + bary.z * v_2, 1)).xyz;
			area = (abs(length(cross((v_1 - v_0),(v_2 - v_0)))/2.0f));
		}
		// normal
		vec3 n_ws_norm;
		{
			mat3 normal_mat = mat3(transpose(inverse(mat)));
			vec3 n_0 = vertex_buffer[light.vertex_buffer_offset + idx_0].normal.xyz;
			vec3 n_1 = vertex_buffer[light.vertex_buffer_offset + idx_1].normal.xyz;
			vec3 n_2 = vertex_buffer[light.vertex_buffer_offset + idx_2].normal.xyz;
			n_ws_norm = normalize(normal_mat * (n_0 * bary.x + n_1 * bary.y + n_2 * bary.z));
		}
		// uv 0
		light.color *= light.intensity;
		if(light.texture_index != -1){
			vec2 uv_0 = vertex_buffer[light.vertex_buffer_offset + idx_0].texture_coordinates_0.xy;
			vec2 uv_1 = vertex_buffer[light.vertex_buffer_offset + idx_1].texture_coordinates_0.xy;
			vec2 uv_2 = vertex_buffer[light.vertex_buffer_offset + idx_2].texture_coordinates_0.xy;
			vec2 uv = (bary.x * uv_0 + bary.y * uv_1 + bary.z * uv_2);
			// emission
			light.color *= texture(texture_sampler[light.texture_index], uv).xyz;
		}
		
		f_l_dir = pos_ws.xyz - hd.hit_pos_ws;
		f_l_dist = length(f_l_dir);
		f_l_dir_norm = f_l_dir / f_l_dist;

		// light illumination only in normal dir
		if(dot(n_ws_norm,-f_l_dir_norm) < 0) return vec3(0);

		weight = 1 * float(light.triangle_count);
		lpdf = areaToSolidAngle(area, f_l_dist, abs(dot(n_ws_norm.xyz,-f_l_dir_norm)));
	}
	if (f_l_dist * f_l_dist < 1e-2f) return vec3(0);
	float mis = 1;
#if defined(SAMPLE_LIGHTS_MIS)
	float brdf_pdf = brdf_pdf(f_v_dir_norm, f_l_dir_norm, hd);
	if(brdf_pdf == 0) return vec3(0);
	if(ubo.max_depth != 1) mis = misBalanceHeuristic(lpdf, brdf_pdf);
#endif
			
	const float NdotL = dot(hd.n_ws_norm.xyz, f_l_dir_norm);
	// back of surface
	//if(!hd.is_double_sided && NdotL <= 0) return vec3(0);

	srp.visible = 1.0f;
	traceRayEXT(tlas, gl_RayFlagsTerminateOnFirstHitEXT, 0xff, 1, 0, 1, hd.hit_pos_ws, ubo.sr_tmin, f_l_dir_norm, f_l_dist + ubo.sr_tmax_offset, 1);
	if(srp.visible == 0.0f) return vec3(0);


	// vec3 brdf = dot(hd.geo_n_ws_norm, f_v_dir_norm) > 0 ? 
	// 	dielectric_eval(hd.albedo.xyz, f_v_dir_norm,  hd.geo_n_ws_norm, /*L*/ f_l_dir_norm, hd.roughness, hd.f0.x) : vec3(0);
	vec3 brdf = brdf_eval(f_v_dir_norm, f_l_dir_norm, hd);
	//result += bd.throughput * ((brdf * light.color * weight * abs(dot(hd.n_ws_norm, f_l_dir_norm)))/lpdf) * mis;
	return bd.throughput * ((brdf * light.color * weight)/lpdf) * mis;
}

vec3 calculateLighting(in HitData hd, inout BounceData bd){
	vec3 result = vec3(0);
	if(ubo.light_count == 0) return result;

	const int index = sampleRangeUniform(0, int(ubo.light_count - 1), randomFloat(seed));
	prevLightIndex = index;
	result += evalLight(index, hd, bd) * ubo.light_count;
	return result;
	
}

void getHitData(out HitData hd, const Ray ray){
	vec3 barycentricCoords = computeBarycentric(rp.hitAttribute);
	const GeometryData_s geometry_data = geometry_buffer[rp.customIndex + rp.geometryIndex];
	const Material_s material = material_buffer[geometry_data.material_index];
	hd.is_double_sided = material.isDoubleSided;

	hd.view_pos_ws = ray.origin;
	hd.id = rp.customIndex;

	// indices
	uint idx_0 = 0;
	uint idx_1 = 0;
	uint idx_2 = 0;
	if(geometry_data.has_indices > 0){
		idx_0 = index_buffer[geometry_data.index_buffer_offset + (rp.primitiveID * 3) + 0];
		idx_1 = index_buffer[geometry_data.index_buffer_offset + (rp.primitiveID * 3) + 1];
		idx_2 = index_buffer[geometry_data.index_buffer_offset + (rp.primitiveID * 3) + 2];
	} else {
		idx_0 = (rp.primitiveID * 3) + 0;
		idx_1 = (rp.primitiveID * 3) + 1;
		idx_2 = (rp.primitiveID * 3) + 2;
	}
	{
		// vertex
		vec4 v_0 = vertex_buffer[geometry_data.vertex_buffer_offset + idx_0].position;
		vec4 v_1 = vertex_buffer[geometry_data.vertex_buffer_offset + idx_1].position;
		vec4 v_2 = vertex_buffer[geometry_data.vertex_buffer_offset + idx_2].position;
		hd.hit_pos_ws = (geometry_data.model_matrix * (v_0 * barycentricCoords.x + v_1 * barycentricCoords.y + v_2 * barycentricCoords.z)).xyz;
		hd.geo_n_ws_norm = normalize(cross((v_1.xyz - v_0.xyz), (v_2.xyz - v_0.xyz)));
	}
	hd.wi_ws_norm = hd.view_pos_ws - hd.hit_pos_ws;
	hd.view_dist = length(hd.wi_ws_norm);
	hd.wi_ws_norm = hd.wi_ws_norm / hd.view_dist;
	{
		// normal
		mat3 normal_mat = mat3(transpose(inverse(geometry_data.model_matrix )));
		hd.o_geo_n_ws_norm = hd.geo_n_ws_norm = normalize(normal_mat * hd.geo_n_ws_norm);
		vec3 n_0 = vertex_buffer[geometry_data.vertex_buffer_offset + idx_0].normal.xyz;
		vec3 n_1 = vertex_buffer[geometry_data.vertex_buffer_offset + idx_1].normal.xyz;
		vec3 n_2 = vertex_buffer[geometry_data.vertex_buffer_offset + idx_2].normal.xyz;
		hd.n_ws_norm = normalize(normal_mat * (n_0 * barycentricCoords.x + n_1 * barycentricCoords.y + n_2 * barycentricCoords.z));
		if(any(isnan(hd.n_ws_norm))) debugPrintfEXT("nan normal %d", rp.instanceID);
		// flip normal if doublesided
		// const bool inside = dot(hd.wi_ws_norm, hd.geo_n_ws_norm) < 0 || hd.is_double_sided;
		// hd.eta_int = inside ? material.ior : 1.0f;
		// hd.eta_ext = inside ? 1.0f : material.ior;

		hd.eta_ext = 1.0f;
		hd.eta_int = material.ior;
		if(hd.is_double_sided && dot(hd.geo_n_ws_norm, hd.wi_ws_norm) < 0) {
			hd.geo_n_ws_norm = -hd.geo_n_ws_norm;
			hd.n_ws_norm = -hd.n_ws_norm;

		}

		// tangent
		vec3 t_0 = vertex_buffer[geometry_data.vertex_buffer_offset + idx_0].tangent.xyz;
		vec3 t_1 = vertex_buffer[geometry_data.vertex_buffer_offset + idx_1].tangent.xyz;
		vec3 t_2 = vertex_buffer[geometry_data.vertex_buffer_offset + idx_2].tangent.xyz;
		hd.t_ws_norm = normalize(normal_mat * (t_0 * barycentricCoords.x + t_1 * barycentricCoords.y + t_2 * barycentricCoords.z));
		if (dot(hd.t_ws_norm, hd.t_ws_norm) < 0.5f || abs(dot(hd.n_ws_norm, hd.t_ws_norm)) > 1e-5) hd.t_ws_norm = getPerpendicularVector(hd.n_ws_norm); // tangent missing or not orthogonal, replace ...  
		//if(any(isnan(hd.t_ws_norm))) debugPrintfEXT("nan tan");

		// bitangent
		hd.b_ws_norm = normalize(cross(hd.n_ws_norm, hd.t_ws_norm));
	}
	{
		// uv 0
		vec2 uv_0 = vertex_buffer[geometry_data.vertex_buffer_offset + idx_0].texture_coordinates_0.xy;
		vec2 uv_1 = vertex_buffer[geometry_data.vertex_buffer_offset + idx_1].texture_coordinates_0.xy;
		vec2 uv_2 = vertex_buffer[geometry_data.vertex_buffer_offset + idx_2].texture_coordinates_0.xy;
		hd.tex_coords_0 = uv_0 * barycentricCoords.x + uv_1 * barycentricCoords.y + uv_2 * barycentricCoords.z;
	}
	
	// base color
	{
		hd.albedo = vec4(1);
		if(material.baseColorTexIdx != -1){
			// level of detail calculation
			// Ray ray_x = getRay(sccs + vec2(2.0 / float(gl_LaunchSizeEXT.x), 0));
			// Ray ray_y = getRay(sccs - vec2(0, 2.0 / float(gl_LaunchSizeEXT.y)));
			// vec3 bary_x = computeBarycentric2(mat3(v_0, v_1, v_2), ray_x.origin, ray_x.direction);
			// vec3 bary_y = computeBarycentric2(mat3(v_0, v_1, v_2), ray_y.origin, ray_y.direction);

			// vec3 pos_ws_x = v_0 * bary_x.x + v_1 * bary_x.y + v_2 * bary_x.z;
			// vec3 pos_ws_y = v_0 * bary_y.x + v_1 * bary_y.y + v_2 * bary_y.z;

			// vec2 tex_coord_x = uv_0 * bary_x.x + uv_1 * bary_x.y + uv_2 * bary_x.z;
			// vec2 tex_coord_y = uv_0 * bary_y.x + uv_1 * bary_y.y + uv_2 * bary_y.z;
			// tex_coord_x -= uv;
			// tex_coord_y -= uv;
			// tex_coord_x *= 0.5;
			// tex_coord_y *= 0.5;

			hd.albedo = (texture(texture_sampler[material.baseColorTexIdx], hd.tex_coords_0));
			//pixel_color = (textureGrad(tex[material.baseColorTexIdx], uv, tex_coord_x, tex_coord_y));
		}
		hd.albedo *= material.baseColorFactor;
	}
	// occlusion
	{
		hd.occlusion = 1.0f;
		if(material.occlusionTexIdx != -1){
			hd.occlusion = texture(texture_sampler[material.occlusionTexIdx], hd.tex_coords_0).r;
			hd.occlusion *= material.occlusionStrength;
		}
	}
	// normal map
	{
		hd.nmap_n_ws_norm = hd.n_ws_norm;
		if(material.normalTexIdx != -1){
			vec3 n_nmap_ts = texture(texture_sampler[material.normalTexIdx], hd.tex_coords_0).xyz;
			hd.nmap_n_ws_norm = nTangentSpaceToWorldSpace(n_nmap_ts, material.normalScale, hd.n_ws_norm);
		}
	}
	// metallic
	{
		hd.metallic = 1.0f;
		if(material.metallicTexIdx != -1){
			hd.metallic = texture(texture_sampler[material.metallicTexIdx], hd.tex_coords_0).r;
		}
		hd.metallic *= material.metallicFactor;
		//hd.albedo = mix(hd.albedo, vec4(0), hd.metallic);
	}
	// roughness
	{
		hd.roughness = 1.0f;
		if(material.roughnessTexIdx != -1){
			hd.roughness = texture(texture_sampler[material.roughnessTexIdx], hd.tex_coords_0).r;
		}
		hd.roughness *= material.roughnessFactor;
	}
	// emission
	{
		hd.emission = material.emissionFactor;
		if(material.emissionTexIdx != -1){
			hd.emission *= texture(texture_sampler[material.emissionTexIdx], hd.tex_coords_0).xyz;
		}
		hd.emission *= material.emissionStrength;
	}
	// specular Color
	// {
	// 	hd.f0 = material.specularColorFactor;
	// 	if(material.specularColorTexIdx != -1){
	// 		hd.f0 *= texture(texture_sampler[material.specularColorTexIdx], hd.tex_coords_0).xyz;
	// 	}
	// }
	{
		hd.transmission = material.transmissionFactor;
		if(material.transmissionTexIdx != -1){
			hd.transmission *= texture(texture_sampler[material.transmissionTexIdx], hd.tex_coords_0).r;
		}
	}

	hd.is_emissive = material.isEmissive;
	// if(dot(hd.geo_n_ws_norm, hd.wi_ws_norm) < 0) {
	// 	hd.geo_n_ws_norm = -hd.geo_n_ws_norm;
	// 	hd.n_ws_norm = -hd.n_ws_norm;
	// 	hd.nmap_n_ws_norm = -hd.nmap_n_ws_norm;
	// }
}

float getMisWeightBrdf(uint lightIndex, in Ray ray, in BounceData bd) {
	traceRayEXT(tlas, gl_RayFlagsNoneEXT, 0xff, 0, 0, 0, ray.origin.xyz, ray.t_min, ray.direction.xyz, ray.t_max, 0);

	Light_s light = light_buffer[lightIndex];
	const uint type = light.type;
	float light_pdf;
	if(isPunctualLight(lightIndex)) {
		light_pdf = 0;
	}
	else if(isSurfaceLight(lightIndex)){
		if(isHyperrectangularLight(lightIndex)){
			light_pdf = 1.0f/ light.dimensions.x * light.dimensions.y; /*rectangle area*/
		}else {
			light_pdf = 1.0f/ M_PI * light.dimensions.x * light.dimensions.x; /*disk area*/
		}
	} else if(isTriangleMeshLight(lightIndex)) {
		vec3 bary = computeBarycentric(rp.hitAttribute);

		const GeometryData_s geometry_data = geometry_buffer[rp.customIndex + rp.geometryIndex];
		const Material_s material = material_buffer[geometry_data.material_index];
		if(light.index_buffer_offset != geometry_data.index_buffer_offset ||
		light.vertex_buffer_offset != geometry_data.vertex_buffer_offset ||
		prevLightTriangleIndex != rp.primitiveID) return 1;

		// indices
		uint idx_0 = 0;
		uint idx_1 = 0;
		uint idx_2 = 0;
		if(geometry_data.has_indices > 0){
			idx_0 = index_buffer[geometry_data.index_buffer_offset + (rp.primitiveID * 3) + 0];
			idx_1 = index_buffer[geometry_data.index_buffer_offset + (rp.primitiveID * 3) + 1];
			idx_2 = index_buffer[geometry_data.index_buffer_offset + (rp.primitiveID * 3) + 2];
		} else {
			idx_0 = (rp.primitiveID * 3) + 0; idx_1 = (rp.primitiveID * 3) + 1; idx_2 = (rp.primitiveID * 3) + 2;
		}
		const vec3 v_0 = (geometry_data.model_matrix * vertex_buffer[geometry_data.vertex_buffer_offset + idx_0].position).xyz;
		const vec3 v_1 = (geometry_data.model_matrix * vertex_buffer[geometry_data.vertex_buffer_offset + idx_1].position).xyz;
		const vec3 v_2 = (geometry_data.model_matrix * vertex_buffer[geometry_data.vertex_buffer_offset + idx_2].position).xyz;

		const vec3 pos_ws = (vec4(bary.x * v_0 + bary.y * v_1 + bary.z * v_2, 1)).xyz;
		vec3 n_norm = cross((v_1 - v_0),(v_2 - v_0));
		const float area = (abs(length(n_norm)/2.0f));
		n_norm = normalize(n_norm);
		const vec3 f_l_dir = pos_ws - ray.origin;
		light_pdf = areaToSolidAngle(area, length(f_l_dir), dot(n_norm,-normalize(f_l_dir)));
	}
	return misBalanceHeuristic(bd.pdf, light_pdf);
}

bool shade(inout vec4 out_color, inout Ray ray, inout BounceData bd) 
{
	out_color = vec4(0,0,0,1);
	rp.instanceID = -1;
	uint rayFlags = gl_RayFlagsNoneEXT;
	if(bd.depth == 1) {
		if(ubo.cull_mode == 1) rayFlags = gl_RayFlagsCullFrontFacingTrianglesEXT;
		if(ubo.cull_mode == 2) rayFlags = gl_RayFlagsCullBackFacingTrianglesEXT;
	}
	traceRayEXT(tlas, rayFlags, 0xff, 0, 0, 0, ray.origin.xyz, ray.t_min, ray.direction.xyz, ray.t_max, 0);

	if(rp.instanceID == -1 /* miss */) {
		if(!ubo.env_shade && bd.depth > 1) return false;
		else out_color += vec4(bd.throughput, 1) * vec4(srgbToLinear(ubo.bg.xyz), 1);
		return false;
	} else {
		HitData hd;
		getHitData(hd, ray);
		// apply occlusion
		hd.albedo.xyz *= hd.occlusion;
		// roughness can not be 0, otherwise the ndf would be nan
		// we also can not set it too low, otherwise we get artifacts
		//hd.roughness = max(hd.roughness, 0.05);

		//debugPrintf("%f %f %f", ray.direction.x, ray.direction.y, ray.direction.z);

		if(!ubo.shade) {
			out_color.xyz = hd.albedo.xyz;
			return false;
		}

		vec3 V = normalize(hd.view_pos_ws - hd.hit_pos_ws);
#if defined(SAMPLE_BRDF) || defined(SAMPLE_LIGHTS_MIS)
		out_color.xyz += bd.throughput * hd.emission;
#endif
#if defined(SAMPLE_LIGHTS) 
		if(bd.depth == 1) out_color.xyz += bd.throughput * hd.emission;
#endif

		// Russian Roulette Path Termination
		// CAUTION: path with and without NEE must be same length
		if(ubo.rrpt != -1 && ubo.rrpt < bd.depth) {
			const float p = min(max(bd.throughput.r, max(bd.throughput.g, bd.throughput.b)), 0.95f);
			if (randomFloat(seed) >= p || p == 0.0f) return false;
			bd.throughput /= p; // pdf
		}

#if defined(SAMPLE_LIGHTS) || defined(SAMPLE_LIGHTS_MIS)
		// NEE
		out_color.xyz += calculateLighting(hd, bd);
#endif

		// get next bounce dir
		ray.t_min = ubo.br_tmin;
		ray.t_max = ubo.br_tmax;
		ray.origin = hd.hit_pos_ws;
		//if(dot(V, hd.nmap_n_ws_norm) <= 0.0f) return false;

		if(!brdf_sample(bd, hd)) return false;
		ray.direction = bd.wo_ws_norm;

		float mis = 1;
#if defined(SAMPLE_LIGHTS_MIS)
		mis = getMisWeightBrdf(prevLightIndex, ray, bd);
#endif
		
		bd.throughput *= bd.weight * mis;
		if(any(isnan(bd.weight))) debugPrintfEXT("NAN: bd.weight");
		if(any(isnan(bd.throughput))) debugPrintfEXT("NAN: bd.throughput");
		if(any(isnan(ray.direction))) debugPrintfEXT("NAN: ray.direction");


		return true;	// hit
	}
}

void main() {
	// set random seed for this pixel
	seed = initRandomSeed(uint(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x), uint(ubo.frameIndex));
	
	imageStore(debug_image, ivec2(gl_LaunchSizeEXT), vec4(0,0,0, 1));

	// per frame samples
	vec4 out_linear = vec4(0);
	vec2 pixel_sample_radius = vec2(ubo.pixel_filter_width * 0.5f);
	float pixel_sample_weights_sum = 0;
	for(int i = 0; i < ubo.pixelSamplesPerFrame; i++){
		vec4 pSample = vec4(0);
		// calculate first ray
		float pixel_sample_weight;
		const vec2 sccs = getScreenCoordinates(pixel_sample_radius, pixel_sample_weight);
		Ray ray = getRay(sccs);
		// shade
		vec4 out_color = vec4(0,0,0,1);
		BounceData bd = {/*throughput*/ vec3(1), /*depth*/ 0, /*wo*/ vec3(ray.direction), /*pdf*/ 1, /*weight*/ vec3(0)};
		// bounces
		for(int j = 0; (j < ubo.max_depth || ubo.max_depth == 0); j++){
			bd.depth += 1;
			bool hit = shade(out_color, ray, bd);
			pSample += out_color;
			if(!hit || !ubo.shade) break;
			//imageStore(debug_image, ivec2(gl_LaunchIDEXT.xy), linearToSRGB(vec4(out_color, 1)));
		}
		pixel_sample_weights_sum += pixel_sample_weight;
		out_linear += pSample * pixel_sample_weight;
	}

	// handle accumulation
	if(ubo.accumulate){
		out_linear = out_linear + imageLoad(acc_image, ivec2(gl_LaunchIDEXT.xy));
		pixel_sample_weights_sum = pixel_sample_weights_sum + imageLoad(acc_c_image, ivec2(gl_LaunchIDEXT.xy)).x;
	}
	imageStore(acc_image, ivec2(gl_LaunchIDEXT.xy), out_linear);
	imageStore(acc_c_image, ivec2(gl_LaunchIDEXT.xy), vec4(pixel_sample_weights_sum));
	// divide linear by sum of sample weights
	out_linear = out_linear / pixel_sample_weights_sum;
	// pre tone mapping exposure adjustment
	out_linear *= ubo.exposure_film; // film
	// tone mapping
	out_linear.xyz = ApplyTonemapping(ubo.tone_mapping_type, out_linear.xyz, luminance(vec3(1)));
	// post tone mapping exposure adjustment
	if(ubo.exposure_tm != 0.0f) out_linear.xyz *= pow(2,ubo.exposure_tm); // color management
	// linear -> srgb
	vec3 out_srgb = linearToSRGB(out_linear.xyz);
	// additional gamma correction
	if(ubo.gamma_tm != 1.0f) out_srgb = pow(out_srgb, vec3(1.0 / ubo.gamma_tm));
	// post process: 
	// dither to get rid of banding
	out_srgb = dither(out_srgb, ubo.dither_strength, randomFloatTriDist(vec2(randomFloat(seed), randomFloat(seed))));
	// write to out image
	if(out_linear.w > 0) imageStore(output_image, ivec2(gl_LaunchIDEXT.xy), vec4(out_srgb, 1));
}